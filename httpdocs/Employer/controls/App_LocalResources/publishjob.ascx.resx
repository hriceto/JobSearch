<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnPublish.Text" xml:space="preserve">
    <value>Add to cart</value>
  </data>
  <data name="lblKeywords.Text" xml:space="preserve">
    <value>Keywords (optional)</value>
  </data>
  <data name="lblReplyEmail.Text" xml:space="preserve">
    <value>Reply email (optional)</value>
  </data>
  <data name="lblReplyUrl.Text" xml:space="preserve">
    <value>Reply url (optional)</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Start Date (optional)</value>
  </data>
  <data name="rdbPrice_0.Text" xml:space="preserve">
    <value>$0.00 - Junior Advertisement (free) [{0} days]</value>
  </data>
  <data name="rdbPrice_1.Text" xml:space="preserve">
    <value>{0} - Basic Advertisement  [{1} days]</value>
  </data>
  <data name="rdbPrice_2.Text" xml:space="preserve">
    <value>{0} - Basic+ Advertisement [{1} days]</value>
  </data>
  <data name="regKeywords.ErrorMessage" xml:space="preserve">
    <value>&lt;br /&gt;The length of the keywords field is exceeding the character limit of 512 characters for this field. Please provide a shorter list of keywords.</value>
  </data>
  <data name="regReplyEmail.ErrorMessage" xml:space="preserve">
    <value>Invalid email</value>
  </data>
  <data name="regReplyUrl.ErrorMessage" xml:space="preserve">
    <value>Invalid url</value>
  </data>
  <data name="regStartDate.ErrorMessage" xml:space="preserve">
    <value>Invalid date</value>
  </data>
  <data name="reqPrice.ErrorMessage" xml:space="preserve">
    <value>A price option is required</value>
  </data>
  <data name="strAddingCartItem" xml:space="preserve">
    <value>Adding item "{0}" to cart.</value>
  </data>
  <data name="strEditingCartItem" xml:space="preserve">
    <value>Editing cart item "{0}".</value>
  </data>
  <data name="strNextFreeJobAd1" xml:space="preserve">
    <value>You have {0} more day until you are able to post another Junior Advertisement (free). &lt;br /&gt;Until then consider using one of our paid ad options.</value>
  </data>
  <data name="strNextFreeJobAd2" xml:space="preserve">
    <value>You have {0} more days until you are able to post another Junior Advertisement (free). &lt;br /&gt;Until then consider using one of our paid ad options.</value>
  </data>
  <data name="strNotReviewedYet" xml:space="preserve">
    <value>Your account is pending review by an administrator. Once your account has been reviewed you may be granted permission to publish Junior Advertisements (&lt;span style="text-decoration:underline;"&gt;Free Advertisements&lt;/span&gt;). You will be notified by email once that happens.</value>
  </data>
  <data name="txtKeywords.title" xml:space="preserve">
    <value>&lt;span style="white-space: nowrap;"&gt;Industry or position specific &lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;keywords that may help&lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt; job seekers find this position.&lt;/span&gt;</value>
  </data>
  <data name="txtReplyEmail.title" xml:space="preserve">
    <value>&lt;span style="white-space: nowrap;"&gt;The email address that&lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;will receive all job applications&lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt; for this position.&lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;(if different from account email)&lt;/span&gt;</value>
  </data>
  <data name="txtReplyUrl.title" xml:space="preserve">
    <value>&lt;span style="white-space: nowrap;"&gt;The url of your custom job &lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;application form if you have one.&lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt; By default applications will be&lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;processed on our website&lt;/span&gt;</value>
  </data>
  <data name="txtStartDate.title" xml:space="preserve">
    <value>&lt;span style="white-space: nowrap;"&gt;The date when your posting will &lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;be published. By default your &lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt; posting will be published upon  &lt;/span&gt;&lt;br /&gt;&lt;span style="white-space: nowrap;"&gt;checkout&lt;/span&gt;</value>
  </data>
</root>